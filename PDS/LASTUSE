/* REXX
 |
 | Name: LASTREF
 |
 | Author: David Alcock
 |
 | Purpose: Display the last use/reference information that the DMS
 |          DASD Management System (program product from Sterling
 |          Software) places in the Format 1 DSCB.
 |
 | Dependencies: DMS (Sterling Software) SVC and LISTDS (IBM) output
 |               format
 |
 | Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It
 |             is provided for your enjoyment and neither David
 |             Alcock or his employer provides any warranty for it's
 |             use.  I'd like to hear how it works on your system.
 |
 |             This software is not in the public domain but is
 |             available free of charge and with source code
 |             provided.  It is copyright 1992-2002+ by David Alcock
 |             All rights reserved.
 */
arg dsn volser

if dsn == "" then do
   say "%LASTUSE - No dataset given"
   exit
   end

if volser <> "" then do
   address TSO "ALLOCATE FILE(LASTUSE) DA("dsn") " ,
               "UNIT(SYSALLDA) VOLUME("volser") SHR REUSE"
   arc = rc
   if arc <> 0 then do
      say "%LASTUSE - Error allocating dataset:"
      say "> DSN="dsn
      say "> VOLSER="volser
      exit
      end
   end
/*
 **** Invoke the LISTDS (IBM TSO COMMAND) to obtain info
 */

call "OUTTRAP" "listds_line.","*"
address TSO "LISTDS "dsn "LABEL"
listds_rc = rc
call "OUTTRAP" "OFF"

/*
 **** If there were problems in LISTDS, display output and term
 */

if listds_rc <> 0 then do
   do i = 1 to listds_line.0
      say listds_line.i
      end
   exit
   end

/*
 **** If the dataset is not fully qualified, make it so
 */

if substr(dsn,1,1) <> "'" then do
   x = LISTDSI(dsn)
   if x = 0 then dsn = SYSDSNAME
   else do
        say sysdsn(dsn)
        exit
        end
   end

/*
 **** Skip thru the output from LISTDS and look for the F1 DSCB
 */

address TSO "CLRSCRN"
do i = 1 to listds_line.0
   if word(listds_line.i,1) == "F1" then do
      parse value listds_line.i with "F1 " volume " " trash1 " ",
                  trash2 " " trash3 " " trash4 " " trash5 " ",
                  trash6 " " dms1 .
      j = i + 1
      parse value listds_line.j with dms2 " " trash1 " " trash2 " ",
                  trash3 " " trash4 " " trash5 " " trash6 " ",
                  trash7 " " trash8 " " trash9 " " trash10 " ",
                  trash11 " " dms3 .

      if substr(dms3,1,1) <> "F" then do
         say "Last reference information not available for "dsn
         exit
         end
      dms2 = substr(dms2,1,6)

      say "Dataset name . . . . ."dsn
      say "Last used Jobname. . ."x2c(substr(dms1,1,16))
      say "Last Used Date . . . ."dscbdate(dms2)

      end
   end
if volser <> "" then ,
   address TSO "FREE FILE(LASTUSE)"
exit 0
/*-------------------------------------------------------------------*/
/* The following routine was taken from Doug Nadel's DSCB command    */
/* which had the following comment:                                  */
/*                                                                   */
/* Thanks to Gary Gindler ggindler@yahoo.com for date code!          */
/*-------------------------------------------------------------------*/
/* GG */
dscbdate: Procedure

 Arg dscb_date
 If dscb_date="000000" Then Return dscb_date
 yyyy = x2d(substr(dscb_date,1,2)) + 1900
 ddd  = x2d(substr(dscb_date,3,4))

 jul_date = yyyy||.||right(ddd,3,'0')
 yyyy_0101 = yyyy || 0101
 base_date = date('B',yyyy_0101,'S') + ddd - 1
 normal_date = date('N',base_date,'B')
 days_ago = date('B') - base_date
 date_string = jul_date normal_date "("
 If days_ago >= 0 Then
   date_string = date_string||days_ago "days ago)"
 Else
   date_string = date_string||abs(days_ago) "days from today)"

 Return date_string
/* GG */
