BENCHMRK TITLE 'Simple benchmark of various OS/390 methods'
* ===================================================================
*
* Name: BENCHMRK
*
* Author: David Alcock :: dave@planetmvs.com
*
* Purpose: Perform a simple benchmark to compare different ways of
*          doing the same thing to see is one has a performance
*          advantage over another one.
*
* Requirements:
* - High Level Assembler
* - MVS version 3 and higher (for entry and exit housekeeping)
*
* Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It
*             is provided for your enjoyment and neither David
*             Alcock or his employer provides any warranty for it's
*             use.  I'd like to hear how it works on your system.
*
*             This software is not in the public domain but is
*             available free of charge and with source code
*             provided.  It is copyright 2001-2002+ by David Alcock
*             All rights reserved.
* ===================================================================

* Set number of loops

#LOOPS   EQU   4*(1024*1024)

* Inline macros

         MACRO ,
&LABEL   SETMODE &MODE,               24 Â¦ 31                          @
               &WREG=1                WORK REGISTER
         AIF   ('&MODE' EQ '24').XAOFF
         AIF   ('&MODE' EQ '31').XAON
         MNOTE 8,'INVALID ADDRESSING MODE SPECIFIED - &MODE'
         MEXIT ,
.XAON    ANOP ,                    GO TO 31 BIT MODE
         CNOP  2,4                 FORCE FULL WORD ALIGNMENT
         LA    &WREG,*+14          POINT TO AMODE = 31 CODE
         O     &WREG,*+6           TURN ON AMODE = 31 BIT
         BSM   0,&WREG             BRANCH TO AMODE = 31 CODE
         DC    X'80000000'         AMODE = 31 BIT
         MEXIT ,
.XAOFF   LA    &WREG,*+6           POINT TO AMODE = 24 CODE
         BSM   0,&WREG             BRANCH TO AMODE = 24 CODE
         MEND

* IBM macros

         PRINT NOGEN
         YREGS ,
         CVT   DSECT=YES,LIST=NO
         IHASDWA ,                      System Diagnostic Work Area
         PRINT GEN
         EJECT ,
BENCHMRK CSECT ,
BENCHMRK AMODE 24
BENCHMRK RMODE 24
*
BM_EC    B     BM_ECL(0,R15)            Bump past EyeCatcher
         DC    AL1(BM_ECE-BM_ECV)       Length of Eyecatcher
BM_ECV   DC    C'BENCHMRK '
         DC    C'-- &SYSDATC &SYSTIME '
         DC    C'-- Benchmark various S/390 methods'
BM_ECE   EQU   *
         DS    0H
BM_ECL   EQU   *-BM_EC
*
         BAKR  R14,0                    Save regs
         LAE   R12,0(R15,0)             Get base register
         USING BENCHMRK,R12             Get addressibility
         SAC   0
         SYSSTATE ASCENV=P
*
         STORAGE OBTAIN,LENGTH=WORKDSL,LOC=BELOW Obtain storage
         LR    R13,R1                   Point to Save Area
         USING WORKDS,R13               Get addressibility to area
         MVC   4(4,R13),=C'F1SA'        Indicate stack SA

* Create ESTAE in case instruction isn't implemented on this boxen

         MVC   PARMLIST(C_ESTAEl),C_ESTAE Initlialize parameter list
         MVC   EWA_ID(4),=CL4'EWA'      Eyecatcher
         STM   R10,R13,EWA_Regs         Save important registers
         L     R7,=V(MYESTAE)           Locate ESTAE routine
         LA    R8,EWA                   Locate EWA
         ESTAE (7),CT,                  Create ESTAE environment       @
               PARAM=((8)),             ..Parameter passed to ESTAE    @
               MF=(E,PARMLIST)

* Program title

         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         LA    R15,MSGAREA
         MVC   0(16,R15),=C'Benchmarks using'
         LA    R15,17(R15)
         L     R1,=A(#LOOPS)
         BAS   R14,EDITFWF
         MVC   1(5,R15),=C'loops'
         LA    R15,1+5(R15)
         LA    R1,MSGAREA
         SR    R15,R1
         LR    R0,R15
         TPUT  (1),(0)

* Housekeeping Benchmark

         LA    R4,C_HOUSE
         BAS   R9,Print_Section_Title
*
         L     R3,=V(HOUSEOLD)
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$HOLD   DS    0H
         LR    R15,R3
         BALR  R14,R15
         BCT   R2,L$HOLD
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_HOLD
         BAS   R9,Report_On_BenchMark
*
         L     R3,=V(HOUSEESA)
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$HESA   DS    0H
         LR    R15,R3
         BALR  R14,R15
         BCT   R2,L$HESA
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_HESA
         BAS   R9,Report_On_BenchMark

* Clear registers

         LA    R4,C_ClearReg
         BAS   R9,Print_Section_Title
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$CLEARL DS    0H
         LA    R15,0
         BCT   R2,L$CLEARL
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_ClearRegLA
         BAS   R9,Report_On_BenchMark
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$CLEARS DS    0H
         SLR   R15,R15
         BCT   R2,L$CLEARS
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_ClearRegSLR
         BAS   R9,Report_On_BenchMark
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$CLEARX DS    0H
         XR    R15,R15
         BCT   R2,L$CLEARX
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_ClearRegXR
         BAS   R9,Report_On_BenchMark

* GETMAIN vs Storage benchmark

         LA    R4,C_STOR
         BAS   R9,Print_Section_Title
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$STORG  DS    0H
         L     R0,=A(4096)
         GETMAIN R,LV=(0)
         FREEMAIN R,LV=(0),A=(1)
         BCT   R2,L$STORG
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_STORG
         BAS   R9,Report_On_BenchMark
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$STORS  DS    0H
         L     R0,=A(4096)
         STORAGE OBTAIN,LENGTH=(0),LOC=BELOW Obtain storage
         STORAGE RELEASE,LENGTH=(0),ADDR=(1) Release storage
         BCT   R2,L$STORS
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_STORS
         BAS   R9,Report_On_BenchMark
 AGO .CPOOLX
 --> I'm not sure why I have the cpool stuff commented out...
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$STORC  DS    0H
         L     R0,=A(4096)
**       CPOOL BUILD,PCELLCT=10,SCELLCT=20,CSIZE=(0)
**       STORAGE OBTAIN,LENGTH=(0),LOC=BELOW Obtain storage
**       STORAGE RELEASE,LENGTH=(0),ADDR=(1) Release storage
         BCT   R2,L$STORC
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_STORC
         BAS   R9,Report_On_BenchMark
.CPOOLX ANOP ,
STARTHERE DS 0H

* Mode switching methods

         LA    R4,C_MODESWITCH
         BAS   R9,Print_Section_Title
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$S24BL  DS    0H
         SETMODE 24
         BCT   R2,L$S24BL
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         LA    R4,C_MODESWITCHB24
         BAS   R9,Report_On_BenchMark
*
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$S31BL  DS    0H
         SETMODE 31
         BCT   R2,L$S31BL
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         SETMODE 24  Back to good addressing mode
         LA    R4,C_MODESWITCHB31
         BAS   R9,Report_On_BenchMark
*
         LA    R1,l$s24E                Locate retry recovery routine
         ST    R1,EWA_RetryA            Save it
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$S24IL  DS    0H
         SAM24 ,
         BCT   R2,L$S24IL
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         XC    EWA_RetryA,EWA_RetryA
         LA    R4,C_MODESWITCHI24
         BAS   R9,Report_On_BenchMark
         B     L$S24EX
L$S24EM  DC    C'        SAM24 instruction not defined on this box'
L$S24E   DS    0H
         XC    EWA_RetryA,EWA_RetryA
         MVI   MSGAREA,C' '
         TPUT  MSGAREA,1
         MVC   MSGAREA(L'L$S24EM),L$S24EM
         TPUT  MSGAREA,L'L$S24EM
L$S24EX  DS    0H
*
         LA    R1,l$s31E                Locate retry recovery routine
         ST    R1,EWA_RetryA            Save it
         L     R2,=A(#LOOPS)
         TIMEUSED STORADR=TU_START,LINKAGE=SYSTEM,CPU=TOD
L$S31IL  DS    0H
         SAM31 ,
         BCT   R2,L$S31IL
         TIMEUSED STORADR=TU_END,LINKAGE=SYSTEM,CPU=TOD
         XC    EWA_RetryA,EWA_RetryA
         SAM24 ,     Back to good addressing mode
         LA    R4,C_MODESWITCHI31
         BAS   R9,Report_On_BenchMark
         B     L$S31EX
L$S31EM  DC    C'        SAM31 instruction not defined on this box'
L$S31E   DS    0H
         XC    EWA_RetryA,EWA_RetryA
         MVI   MSGAREA,C' '
         TPUT  MSGAREA,1
         MVC   MSGAREA(L'L$S31EM),L$S31EM
         TPUT  MSGAREA,L'L$S31EM
L$S31EX  DS    0H

* Leave

EXIT     DS    0H
         ESTAE 0
         LR    R2,R13                     Get storage address
         STORAGE RELEASE,LENGTH=WORKDSL,ADDR=(R2) Release storage
         SLR   R15,R15                    Set return code
         PR    ,                          Return to caller
         EJECT
***********************************************************************
***
**       Report on the results of the benchmark
**
** On entry:
** - TU_START - Timeused at start
** - TU_END   - Timeused at end
** - R4 - Address of string
***
***********************************************************************
         SPACE 2
Report_On_BenchMark DS 0H
         LM    R0,R1,TU_END
         SL    R1,TU_START+4
         BC    11,*+6
         BCTR  R0,0
         SL    R0,TU_START
         STM   R0,R1,TU_TCPU
*
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         TPUT  MSGAREA,1
*
         LA    R15,MSGAREA+8
         SLR   R14,R14
         IC    R14,0(R4)
         EX    R14,ROB$MOVE
         TPUT  MSGAREA,79
*
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         AGO   .INHEX - - - - - - - - - - - - - - Skip debugging code
         LA    R15,MSGAREA+12
         UNPK  0(9,R15),TU_START(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         UNPK  0(9,R15),TU_START+4(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         MVC   0(6,R15),=C'=Start'
         TPUT  MSGAREA,79
*
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         LA    R15,MSGAREA+12
         UNPK  0(9,R15),TU_END(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         UNPK  0(9,R15),TU_END+4(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         MVC   0(4,R15),=C'=End'
         TPUT  MSGAREA,79
*
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         LA    R15,MSGAREA+12
         UNPK  0(9,R15),TU_TCPU(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         UNPK  0(9,R15),TU_TCPU+4(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         LA    R15,8(R15)
         MVC   0(6,R15),=C'=Total'
         TPUT  MSGAREA,79
.INHEX   ANOP  , - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
         MVC   PARMLIST(C_STCKCONVL),C_STCKCONV Get parameter list
         STCKCONV STCKVAL=TU_TCPU,          Convert STCK from TOD,     @
               CONVVAL=DOUBLE2,             ..Output return area       @
               TIMETYPE=DEC,                ..Type of time field       @
               DATETYPE=YYYYMMDD,           ..Type of date field       @
               MF=(E,PARMLIST)              ..Execute from here
         ST    R15,PARMLIST
*
*-TIME is returned in format: "HHMMSSthmiju0000"
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         LA    R15,MSGAREA+12
         MVC   0(14,R15),=C'CPU Time used:'
         LA    R15,15(R15)      H H : M M : S S . t h m i
         MVC   0(15,R15),=X'402120207A20207A20204B20202020'
         ED    0(15,R15),DOUBLE2          Edit the cpu time
         TPUT  MSGAREA,79
*
         BSM   0,R9
ROB$MOVE MVC   0(0,R15),1(R4)

*
** Report on the benchmark title
*
Print_Section_Title DS 0H
         MVI   MSGAREA,C' '
         TPUT  MSGAREA,1
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         LA    R15,MSGAREA+4
         SLR   R14,R14
         IC    R14,0(R4)
         EX    R14,RT$MOVE
         LA    R15,1(R14,R15)
         LA    R1,MSGAREA
         SR    R15,R1
         LR    R0,R15
         TPUT  (1),(0)
         BSM   0,R9
RT$MOVE  MVC   0(*-*,R15),1(R4)
         EJECT
***********************************************************************
***
**       Misc subroutines
***
***********************************************************************
         SPACE 2
*
**       EDIT FULLWORD (FLUSH TO R15)
**       R1 --> INPUT:REGISTER TO PRINT
**       R15 --> OUTPUT: ADDRESS WHERE OUTPUT IS TO BE PUT
*
EDITFWF  DS    0H
         ST    R14,EF_RA
         LTR   R1,R1                      CHECK FOR 0
         BZ    EDITFWF0                   YES, PUT ZERO
         CVD   R1,DOUBLE                  NO, CONVERT TO PACKEC
         LA    R1,DOUBLE2+14              LOCATE SIG DIGIT
         MVC   DOUBLE2(15),EDITP15
         EDMK  DOUBLE2(15),DOUBLE+2       EDIT AND SAVE PLACE
         LA    R14,DOUBLE2+16             LOCATE LAST POSSIBLE BYTE + 1
         SR    R14,R1                     LENGTH = END - START
         BCTR  R14,0                      DECREMENT FOR EX
         EX    R14,EDITFWFM               MOVE EDIT NUMBER TO OUTPUT
         LA    R15,0(R14,R15)             BUMP POINTER PAST NUMBER
         MVI   0(R15),C' '                Fix unprintable character
         L     R14,EF_RA
         BSM   0,R14                      RETURN TO CALLER
EDITFWFM MVC   0(0,R15),0(R1)
EDITP15  DC    X'40,20,20,6B,20,20,20,6B,20,20,20,6B,20,20,20'
EDITFWF0 DS    0H
         MVI   0(R15),C'0'                PUT IN ZERO
         LA    R15,1(R15)                 BUMP POINTER PAST ZERO
         L     R14,EF_RA
         BSM   0,R14                      RETURN TO CALLER
         EJECT
***********************************************************************
***
**       Constants for BENCHMRK CSECT
***
***********************************************************************
C_HOUSE  DC    AL1(C_HOUSEL-2)
         DC    C'Entry/Exit Housekeeping Methods'
C_HOUSEL EQU   *-C_HOUSE

C_HOLD   DC    AL1(C_HOLDL-2)
         DC    C'Using S/360 Instructions (STM/LM)'
C_HOLDL  EQU   *-C_HOLD

C_HESA   DC    AL1(C_HESAL-2)
         DC    C'Using ESA Instructions (BAKR/PR)'
C_HESAL  EQU   *-C_HESA

C_ClearReg DC  AL1(C_ClearRegL-2)
         DC    C'Clearing register'
C_ClearRegL EQU *-C_ClearReg

C_ClearRegLA DC AL1(C_ClearRegLAL-2)
         DC    C'Using LA R15,0 instruction'
C_ClearRegLAL EQU *-C_ClearRegLA

C_ClearRegXR DC AL1(C_ClearRegXRL-2)
         DC    C'Using XR R15,R15 instruction'
C_ClearRegXRL EQU *-C_ClearRegXR

C_ClearRegSLR DC AL1(C_ClearRegSLRL-2)
         DC    C'Using SLR R15,R15 instruction'
C_ClearRegSLRL EQU *-C_ClearRegSLR


C_STOR   DC    AL1(C_STORL-2)
         DC    C'Virtual Storage obtain/release Methods'
C_STORL EQU    *-C_STOR

C_STORG  DC    AL1(C_STORGL-2)
         DC    C'Using Getmain/Freemain R'
C_STORGL EQU   *-C_STORG
C_STORS  DC    AL1(C_STORSL-2)
         DC    C'Using Storage macro'
C_STORSL EQU   *-C_STORS
C_STORC  DC    AL1(C_STORCL-2)
         DC    C'Using CPOOL macro'
C_STORCL EQU   *-C_STORC

C_MODESWITCH DC AL1(C_MODESWITCHL-2)
         DC    C'Addressing Mode switch'
C_MODESWITCHL EQU *-C_MODESWITCH

C_MODESWITCHB24 DC AL1(C_MODESWITCHB24L-2)
         DC    C'Using Old Branch method to 24-bit'
C_MODESWITCHB24L EQU *-C_MODESWITCHB24

C_MODESWITCHB31 DC AL1(C_MODESWITCHB31L-2)
         DC    C'Using Old Branch method to 31-bit'
C_MODESWITCHB31L EQU *-C_MODESWITCHB31

C_MODESWITCHI24 DC AL1(C_MODESWITCHI24L-2)
         DC    C'Using z/Arch SAM24 instruction'
C_MODESWITCHI24L EQU *-C_MODESWITCHI24

C_MODESWITCHI31 DC AL1(C_MODESWITCHI31L-2)
         DC    C'Using z/Arch SAM31 instruction'
C_MODESWITCHI31L EQU *-C_MODESWITCHI31

* Macro expansions

C_STCKCONV  STCKCONV MF=L
C_STCKCONVL EQU *-C_STCKCONV

C_ESTAE  ESTAE *-*,CT,TERM=NO,MF=L
C_ESTAEl EQU   *-C_ESTAE

* Literals

         LTORG ,
         DROP  R12,R13
         EJECT
***********************************************************************
***
**        Entry/Exit housekeeping
***
***********************************************************************
         SPACE 2
*
** Entry and Exit housekeeping using the old method
*
HOUSEOLD CSECT ,
HOUSEOLD AMODE 31
HOUSEOLD RMODE ANY
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING HOUSEOLD,R12
         ST    R13,SAVEAREA+4
         LR    R2,R13
         LA    R13,SAVEAREA
         ST    R13,8(R2)
*
         SLR   R15,R15
*
         L     R13,SAVEAREA+4
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
         DS    0F
SAVEAREA DS    18F
         DROP  R12
*
** Entry and Exit housekeeping using the ESA method
*
HOUSEESA CSECT ,
HOUSEESA AMODE 31
HOUSEESA RMODE ANY
         BAKR  R14,0
         LAE   R12,0(R15,0)
         USING HOUSEESA,R12
*
         SLR   R15,R15
*
         PR    ,
         DROP  R12

***********************************************************************
***
**     E S T A E   E X I T  - Gets control for ABENDs
**
**     \\//////      ________________
**     \\    |      /                \
**     \(_  x|     /  Bloooeeahhh!!! |
**     \    __)  _/__________________/
**   __/   _\ ,. .
**  /     /  .%:. * .
** |  |   |   . ;>, $  '                 "Castles made of sand,
** |  |   |    .=.~@ .  &                fall into the sea,
** UUUU---|   :?. ;. .Â¬#  .   Â¬          eventually" -- Jimi Hendrix
** |      |    < * '   .   ,  *
**
***
***********************************************************************

MYESTAE  CSECT ,
MYESTAE  AMODE 31
MYESTAE  RMODE ANY

* Standard O/S eyecatcher

ER_EC    B     ER_ECL(0,R15)            Bump past EyeCatcher
         DC    AL1(ER_ECE-ER_ECV)       Length of Eyecatcher
ER_ECV   DC    C'MYESTAE - ESTAE error routine'
ER_ECE   EQU   *
         DS    0H
ER_ECL   EQU   *-ER_EC

* Standard ESA entry housekeeping

 bakr  r14,0                            Save regs
 lae   r12,0(r15,0)                     Get base register
 USING MYESTAE,R12                      Get addressibility
 SAC   0
 SYSSTATE ASCENV=P

* Register input parameters
* R0 - Code:
*      - 0  ... Active I/O has be Quiesced and is restorable
*      - 4  ... Active I/O has been halted and is not restorable
*      - 8  ... No active I/O at ABEND Time
*      - 12 ... an SDWA was not obtained
*      - 16 ... No I/O processing was performed
* R1 - IF R0 <> 12 THEN it has SDWA ELSE ABEND code

 ch    r0,=H'12'                        SDWA present?
 be    er$x                             No, just leave
 lr    r2,r1                            Save SDWA address
 USING SDWA,r2
 l     r4,SDWAPARM                      Locate EWA

* Get set for return address

 ICM   R3,B'1111',EWA_RetryA-EWA(R4)    Get retry addr
 BZ    ER$X                             Not there, give up
 MVC   SDWASR13(4),EWA_R13-EWA(R4)
 MVC   SDWASR12(4),EWA_R12-EWA(R4)
 MVC   SDWASR11(4),EWA_R11-EWA(R4)
 MVC   SDWASR10(4),EWA_R10-EWA(R4)

         SETRP WKAREA=(2),              Set Return Parameters          @
               RETADDR=(3),             ..Return Address               @
               RETREGS=YES,             ..Reset regs using SDWASRSV    @
               DUMP=NO,                 ..Not verbose, just recover    @
               RC=4                     ..Retry using RETADDR
         DROP  R2

* Return with no attempt to retry

er$x ds 0h
 pr    ,                                Return to caller

* constants

 LTORG ,                                Literals
 ds    0d                               End on doubleword boundry
MYESTAEL equ    *-MYESTAE
 drop  R12
         EJECT
***********************************************************************
***
**       Dynamic Save area
***
***********************************************************************
         SPACE 2
WORKDS         DSECT ,
               DS    18F               Register Save Area
DOUBLE         DS    D
DOUBLE2        DS    2D
PARMLIST       DS    10F
EF_RA          DS    F

EWA            ds    0f                 ESTAE Work Area
EWA_ID         ds    cl4'EWA'           ..ID for dumps
EWA_RetryA     ds    xl4                ..Retry address
EWA_Regs       equ   *                  ..Important registers
EWA_R10        ds    f
EWA_R11        ds    f
EWA_R12        ds    f
EWA_R13        ds    f
EWAL           equ   *-EWA

MSGAREA        DS    CL133
               DS    0D
*
TU_START       DS    XL8
TU_END         DS    XL8
TU_TCPU        DS    XL8
               DS    0D
WORKDSL        EQU   *-WORKDS
               END   ,
