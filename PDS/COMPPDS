/* REXX
 |
 | Name: COMPPDS
 |
 | Author: David Alcock :: dave@planetmvs.com
 |
 | Purpose: Compare the contents of two PDS datasets.
 |
 | Requires: IBM's ISPF ISRSUPR compare utility
 |           IBM's ISPF LM services (needs to run under ISPF)
 |
 | Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It
 |             is provided for your enjoyment and neither David
 |             Alcock or his employer provides any warranty for it's
 |             use.  I'd like to hear how it works on your system.
 |
 |             This software is not in the public domain but is
 |             available free of charge and with source code provided.
 |             It is copyright 2002+ by David Alcock.
 |             All Rights reserved.
 */

/**********************************************************************
*           M o d i f i c a t i o n   H i s t o r y
*
* Person     Date        Description
* ---------- ----------- ---------------------------------------------
* DGAlcock   2002-08-09  v1.0 Initial version created;
**********************************************************************/

/*---------------------------------------------------------------------
 | Installation settings
 ------------------------------------------------------------------- */

PDS_CMD = "PDS"   /* name of PDS command from CBT tape or Serena's
                     starTools name */

diskunit = "SYSALLDA"  /* unit name for allocating compare datasets */


/*---------------------------------------------------------------------
 | Create standard starting exec messages
 ------------------------------------------------------------------- */

vrm = '1.0'

mtype = address()
PARSE SOURCE s1 s2 s3 s4 s5 s6 s7 s8 s9

if mtype == "TSO" | mtype == "MVS" then ,
   if sysvar(systsoe) > "2040" then do
      systemid = mvsvar(syssmfid)
      sysopsys = mvsvar('sysopsys')
      osname = word(sysopsys,1)
      osver  = word(sysopsys,2)
      end
   else do
        cvt    = storage(10,4)
        dcvt   = c2d(cvt)
        smca   = storage(c2x(d2c(dcvt+x2d(c5))),3)
        dsmca  = c2d(smca)
        systemid = storage(c2x(d2c(dsmca+x2d(10))),4)
        end
else do
     systemid = ""
     osname = ""
     osver = ""
     end

say "COMPPDS - version "vrm "- Freeware - PDS compare"
say " "
say ". Executing in Environment: "s1 "-" mtype
if systemid <> "" then say ". Executing on system: "systemid
else do
     say "This Rexx exec can only execute properly on a OS/390" ,
         "(MVS) mainframe"
     exit 12
     end
if osname <> "" then say ". Operating system: "osname osver
say ". Date: "date() "Time:" time()
say " "

/*---------------------------------------------------------------------
 | Create a PDS where we will put the COMPARE output
 ------------------------------------------------------------------- */

outdsn = sysvar(SYSUID)".SPFTEMP1.COMPPDS.OUTPUT"
x = outtrap("XMSG.","*")
address TSO "DELETE '"outdsn"'"
x = outtrap("off")
address TSO "ALLOCATE FILE(OUTDD) DA('"outdsn"')" ,
            "UNIT("diskunit") NEW REUSE SPACE(90 90) DIR(64) TRACKS",
            "LRECL(133) BLKSIZE(1330) RECFM(F B A)"
Say "Compare output to file:" outdsn
say " "

/*---------------------------------------------------------------------
 | Get the directory of the old library using ISPF LM services
 ------------------------------------------------------------------- */

x = LISTDSI(OLDLIB "FILE")
if x <> 0 then do
   say "Error with LISTDSI for //OLDLIB"
   EXIT 12
   END
olddsn = sysdsname
oldvol = sysvolume

address ISPEXEC
"CONTROL ERRORS RETURN"
"LMINIT DATAID(OLDID) DATASET('"OLDDSN"') VOLUME("OLDVOL")"
"LMOPEN DATAID("OLDID")"
MEMBER = ' '
"LMMLIST  DATAID("OLDID") MEMBER(MEMBER) STATS(YES)"
doldcnt = 0
do while RC = 0
   doldcnt = doldcnt + 1
   olddir.doldcnt = member
   "LMMLIST  DATAID("OLDID") MEMBER(MEMBER) STATS(YES)"
   END
"LMFREE  DATAID("OLDID")"
olddir.0 = doldcnt
Say "Processing OLD library:" olddsn "on volume" oldvol ,
    "members:" doldcnt

/*---------------------------------------------------------------------
 | Get the directory of the new library using ISPF LM services
 ------------------------------------------------------------------- */

x = LISTDSI(NEWLIB "FILE")
if x <> 0 then do
   say "Error with LISTDSI for //NEWLIB"
   EXIT 12
   END
newdsn = sysdsname
newvol = sysvolume

address ISPEXEC
"CONTROL ERRORS RETURN"
"LMINIT DATAID(NEWID) DATASET('"NEWDSN"') VOLUME("NEWVOL")"
"LMOPEN DATAID("NEWID")"
MEMBER = ' '
"LMMLIST  DATAID("NEWID") MEMBER(MEMBER) STATS(YES)"
dnewcnt = 0
do while RC = 0
   dnewcnt = dnewcnt + 1
   newdir.dnewcnt = member
   "LMMLIST  DATAID("NEWID") MEMBER(MEMBER) STATS(YES)"
   END
"LMFREE  DATAID("NEWID")"
newdir.0 = dnewcnt
Say "Processing NEW library:" newdsn "on volume" newvol ,
    "members:" dnewcnt

/*---------------------------------------------------------------------
 | Compare the two partitioned datasets using the directory list.
 ------------------------------------------------------------------- */

say " "
oldcnt = 0
newcnt = 0
difcnt = 0
samecnt = 0
matcnt = 0
moldcnt = 0
mnewcnt = 0
total = 0

address TSO
call ReadOldDir                       /* Start on first member */
call ReadNewDir                       /* Start on first member */

end_of_file = 0

do while end_of_file = 0

oldmem = word(oldrec,1)
newmem = word(newrec,1)
select
  when oldmem == newmem then do
       matcnt = matcnt + 1

       "ALLOC FILE(NEWDD) DA('"newdsn"("strip(newmem)")') SHR REUSE" ,
                          "VOLUME("newvol") UNIT("diskunit")"

       "ALLOC FILE(OLDDD) DA('"olddsn"("strip(oldmem)")') SHR REUSE" ,
                          "VOLUME("oldvol") UNIT("diskunit")"

       "ALLOC FILE(OUTDD) DA('"outdsn"("strip(oldmem)")') SHR REUSE"

       "CALL *(ISRSUPC) 'DELTAL,LINECMP,SEQ'"
       CRC = RC

       /* If the compare showed exact match, delete the member from
          the output PDS so we end up with only members with
          differences in the compare output pds */

       if CRC == 0 then do
          samecnt = samecnt + 1
          x = outtrap("XMSG.","*")
          pds_cmd "'"outdsn"' del "oldmem
          prc = rc
          x = outtrap("off")
          if prc <> 0 then do i = 1 to xmsg.0
             say ">" xmsg.i
             end
          end

       else difcnt = difcnt + 1

       say left("Match for member:",20) left(newmem,8) ,
           "Compare RC="crc

       call ReadNewDir
       call ReadOldDir
       end
  when oldeof == 1 then do
       moldcnt = moldcnt + 1
       Say Left("Missing in Old:",20) left(newmem,8)
       call ReadNewDir
       end
  when neweof == 1 then do
       mnewcnt = mnewcnt + 1
       Say Left("Missing in New:",20) left(oldmem,8)
       call ReadOldDir
       end
  when oldmem > newmem then do
       moldcnt = moldcnt + 1
       Say Left("Missing in Old:",20) left(newmem,8)
       call ReadNewDir
       end
  when newmem > oldmem then do
       mnewcnt = mnewcnt + 1
       Say Left("Missing in New:",20) left(oldmem,8)
       call ReadOldDir
       end
  otherwise
       Say Left("Error!         ",20) newmem "+" oldmem
       Exit 12
       end

if oldeof == 1 then ,
   if neweof == 1 then end_of_file = 1

total = total + 1
end /* of "do while end_of_file = 0" */

/*---------------------------------------------------------------------
 | Print summary and terminate
 ------------------------------------------------------------------- */

say " "
say "Summary:"
say "o Total members. . . . . . . . . . . ."total
say "o Members in both old and new. . . . ."matcnt
say "o Members in both that differed. . . ."difcnt
say "o Members in both that were the same ."samecnt
say " "
say "o NEW library:"
say "  o Data set name. . . . . . . . . . ."newdsn
say "  o Volume . . . . . . . . . . . . . ."newvol
say "  o Total members. . . . . . . . . . ."dnewcnt
say "  o Members missing. . . . . . . . . ."mnewcnt
say " "
say "o OLD library:"
say "  o Data set name. . . . . . . . . . ."olddsn
say "  o Volume . . . . . . . . . . . . . ."oldvol
say "  o Total members. . . . . . . . . . ."doldcnt
say "  o Members missing. . . . . . . . . ."moldcnt
say " "
say " "

exit 0

/*---------------------------------------------------------------------
 | Position to the next directory entry (new)
 ------------------------------------------------------------------- */
ReadNewDir:
if (newcnt + 1) > newdir.0 then do
   neweof = 1
   return
   end

newcnt = newcnt + 1
newrec = newdir.newcnt
return

/*---------------------------------------------------------------------
 | Position to the next directory entry (old)
 ------------------------------------------------------------------- */
ReadOldDir:
if (oldcnt + 1) > olddir.0 then do
   oldeof = 1
   return
   end

oldcnt = oldcnt + 1
oldrec = olddir.oldcnt
return

/*---------------------------------------------------------------------
 | End of COMPPDS Rexx exec - May the source be with you. ObiWan.
 ------------------------------------------------------------------- */
