        /* REXX
         |
         |  Name: LRS
         |
         |  Author: David Alcock
         |
         |  Application: Logrec Software Events
         |
         |  Written: 27-Sep-1991
         |
         |  Purpose: Process the Software LOGREC file into an ISPF table for
         |           easy persual.
         |
         |  Oops:
         |  - This application is not Year 2000 compilant yet.
         |
         |
         */
        lrsVer = "v1.60"                   /* LRS ISPF application version    */
        address ISPEXEC "VPUT (LRSVER)"    /* Give it to ISPF for safekeeping */

        arg options

        /***********************************************************************
        * Installation dependent code                                          *
        ***********************************************************************/

        accin_dsn = "'SYS9.SYS.LOGREC.SOFTLOG'"    /* default input name */

        /*
         | Create CPU table, with:
         | - Header: "CPUS4LRS"
         | - Entries:
         |   - 6 bytes: CPU serial number in LPAR format (if PR/SM)
         |   - 8 bytes: System name
         | - End: X'FF,FF,FF,FF'
         |
         |     Note: The best thing to do here would be to process
         |           an ISPF table.  The user would then have a way
         |           to update this ISPF CPU table by an option.
         */
        DA#lrsc = "CPUS4LRS"            /* Get Header */
        cpu.1  = "010491XYZ1    "       /* CPU entry */
        cpu.2  = "110491XYZ1    "       /* CPU entry */
        cpu.3  = "210491XYZ1    "       /* CPU entry */
        cpu.4  = "310491XYZ1    "       /* CPU entry */
        cpu.5  = "410491XYZ1    "       /* CPU entry */
        cpu.6  = "510491XYZ1    "       /* CPU entry */
        cpu.7  = "050491XYZ5    "       /* CPU entry */
        cpu.8  = "150491XYZ5    "       /* CPU entry */
        do i = 1 to 8
           DA#lrsc = DA#lrsc||left(cpu.i,14)
           end
        /* */
        DA#lrsc = DA#lrsc||'FFFFFFFF'x  /* Add Trailer */
        address ISPEXEC "VPUT (DA#LRSC)"

        /***********************************************************************
        * Handle input options                                                 *
        ***********************************************************************/

        option_num = words(options)             /* Obtain number of words */
        error = ""                              /* No errors yet */
        if option_num <> 0 then ,
           do i = 1 to option_num
              select

                when abbrev(word(options,i),'DSN') = 1 then do
                     accin_dsn = word(options,i+1)
                     i = i + 1
                     end

                /* other options to parse go here... */

                otherwise
                 error = error||" "||word(options,i)
                 end
              end   /* of "do i = 1 to option_num" */
        /*
        *** Gripe about errors (if any)
        */
        if error <> "" then do
           zedsmsg = "Invalid parms"
           zedlmsg = "Parm(s) in error: "error
           address ISPEXEC "SETMSG MSG(ISRZ001)"
           exit
           end

        /***********************************************************************
        * Verify and allocate the dump log dataset                             *
        ***********************************************************************/

        x = SYSDSN(accin_dsn)
        if x <> "OK" then do
           zedsmsg = x
           zedlmsg = "Error with DSN="accin_dsn
           address ISPEXEC "SETMSG MSG(ISRZ001)"
           exit
           end

        status = "Processing LOGREC entries in "accin_dsn
        info1 = ""
        info2 = ""
        info3 = ""
        info4 = ""
        address ISPEXEC "CONTROL DISPLAY LOCK"
        address ISPEXEC "DISPLAY PANEL(LRS$LOGO)"

        /*********************************************************************
        *  Create unique table names and get ISPF to create tables           *
        *********************************************************************/

        lrstable = "LRST"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)
        address ISPEXEC "VPUT LRSTABLE"
        address ISPEXEC "TBCREATE "lrstable ,
                        "NAMES(LRSTIME,LRSDATEJ,LRSDATEG,LRSDAY,LRSDAYN,LRSTYPE,",
                        "LRSJOBN,LRSCOMP,LRSCSCT,LRSREAS,LRSCPU,LRSSEQN,LRSDESC,",
                        "LRSBTIME,LRSBDATE)",
                        "NOWRITE REPLACE"
        address ISPEXEC "TBSORT "lrstable" FIELDS(LRSBDATE,B,A)"

        statable = "LRSS"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)
        address ISPEXEC "VPUT STATABLE"
        address ISPEXEC "TBCREATE "statable" NAMES(LINE) NOWRITE REPLACE"

        sumtable = "SUMT"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)
        address ISPEXEC "VPUT SUMTABLE"
        address ISPEXEC "TBCREATE "sumtable ,
                        "NAMES(SUMMOD,SUMCSCT,SUMREAS,SUMSDATE,SUMEDATE,SUMCOUNT)",
                        "NOWRITE REPLACE"
        address ISPEXEC "TBSORT "sumtable" FIELDS(SUMCOUNT,N,D)"

        /*********************************************************************
        *  Invoke the assembler routine to format the dataset entries        *
        *  into table entries                                                *
        *********************************************************************/

        address TSO     "ALLOCATE FILE(ACCIN) DA("accin_dsn") SHR REUSE"
        address ISPEXEC "SELECT PGM(DA$EREP)"
        address TSO     "FREE FILE(ACCIN)"

        call "OUTTRAP" "dummy.","*"
        address TSO     "FREE FILE(LRSCTBL)"
        call "OUTTRAP" "OFF"

        address ISPEXEC "TBSTATS "lrstable" ROWCURR(LRSROWS)"

        /*********************************************************************
        *  Display the table                                                 *
        *********************************************************************/

        /*
        *** Initialize
        */

        address ISPEXEC "TBSCAN "lrstable" ARGLIST(LRSBDATE)"
        address ISPEXEC "TBTOP "lrstable       /* Get to the top of things */
        lrstsel = ""                           /* Set table selection to null */
        lrstbdrc = 0                           /* Starting TBDISPL return code */
        lrstbcrp = 1                           /* Row number one */
        lrsEREP.0 = 0                          /* Initialize number of EREP reports */
        lrsEREPSave = 0                        /* Don't Save EREP reports... */
        lrsSortName = "LRSDATEG"               /* Sort name */
        lrsSortKey = "DATE"                    /* Default sort key */
        lrsSortDir = "A"                       /* Default sort direction */
        lrsMode = "ALL"                        /* Showing all records */
        lrsVerb = ""                           /* No verb yet */
        lrsOption = "SHORT"                    /* Set display to one-liner */
        call Setup_lrsTable                    /* Set up table display models and titles */

        /*
        *** Skip to first row of the current date
        */

        if lrsCDRow <> "0" then do
           address ISPEXEC "TBSKIP "lrstable "NUMBER("lrsCDRow")"
           lrstbcrp = lrsCDRow
           zedsmsg = "Last Date"
           zedlmsg = "You are located at the first record for last date in the database"
           address ISPEXEC "SETMSG MSG(ISRZ001)"
           end

        /*
        *** Process table until user hits the END key
        */

        do while lrstbdrc < 8
           if lrstbdrc = 4 then address ISPEXEC "TBDISPL "lrstable
           else address ISPEXEC "TBDISPL "lrstable" PANEL("lrstpanl") CSRROW("lrstbcrp") POSITION(LRSTBCRP) AUTOSEL(NO)"

           lrstbdrc = rc
           lrsVerb = "TB"
           if lrstbdrc < 8 then do

              /******************************************************************
              * Process the primary line for commands                           *
              *******************************************************************/

              if zcmd <> '' then do
                 parse value zcmd with lrsVerb " " lrsAction " " lrsDirection
                 lrsZCMD = zcmd
                 zcmd = ''
                 lrsVerb = translate(lrsVerb)

                 select

                   /***********************************************************
                   * Put report of table entries to the list file             *
                   ***********************************************************/

                   when lrsVerb == 'REPORT' then do
                        if lrsRows > 3000 then do       /* Lotsa records? */
                           status = "Generating report to list file"
                           info1 = ""
                           info2 = "Number of records: "strip(lrsRows,'L','0')
                           info3 = ""
                           info4 = ""
                           address ISPEXEC "CONTROL DISPLAY SAVE"
                           address ISPEXEC "CONTROL DISPLAY LOCK"
                           address ISPEXEC "DISPLAY PANEL(LRS$LOGO)"
                           address ISPEXEC "CONTROL DISPLAY RESTORE"
                           end
                        Output = "1"strip(lrsRange) "- Generated:" date() time()
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                        Output = " "
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"

                        Output = " Date         Day Time        RecType  Jobname  Reason   Module   Csect    CPU     ",
                                 "SeqNo Description"
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                        Output = " ------------ --- ----------- -------- -------- -------- -------- -------- --------",
                                 "----- -----------"
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"

                        address ISPEXEC "TBTOP "lrstable
                        LRC = 0
                        do while LRC = 0
                           address ISPEXEC "TBSKIP "lrstable
                           LRC = rc
                           if lrc == 0 then do
                              output = " "|| ,
                                       left(lrsdateg,8)||" "||substr(lrsdatej,4,3)||" "left(lrsday,3) ,
                                       left(lrstime,11)||" "||left(lrstype,8)||" "||left(lrsjobn,8) ,
                                       left(lrsreas,8)||" "||left(lrscomp,8)||" "||left(lrscsct,8) ,
                                       left(lrscpu,8)||" "||left(lrsseqn,5)||" "||left(lrsdesc,30)

                              address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                              end
                           end /* of "do while LRC = 0" */

                        zedsmsg = "Output created"
                        zedlmsg = "LOGREC entry log put into list dataset"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"

                        lrsVerb = ""
                        end

                   /***********************************************************
                   * This is a good verb NOT!                                 *
                   ***********************************************************/

                   when lrsVerb == '?' then do
                        zedsmsg = "Don't question me"
                        zedlmsg = "Take your riddlin' Garth"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Put the table display in short (one line mode)           *
                   ***********************************************************/

                   when lrsVerb == 'SHORT' then do
                        lrsOption = "SHORT"
                        call Setup_lrsTable
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Put the table display in long (two line mode)            *
                   ***********************************************************/

                   when lrsVerb == 'LONG' then do
                        lrsOption = "LONG"
                        call Setup_lrsTable
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Save the EREP records                                    *
                   ***********************************************************/

                   when lrsVerb == 'SAVERPT' then do
                        lrsEREPSave = 1
                        zedsmsg = "Saving Reports"
                        zedlmsg = "EREP reports will not be deleted when terminating SOFTLOG"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Don't save EREP records                                  *
                   ***********************************************************/

                   when lrsVerb == 'DSAVERPT' then do
                        lrsEREPSave = 0
                        zedsmsg = "Deleting Reports"
                        zedlmsg = "EREP reports will be deleted when terminating SOFTLOG"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Show summary table of record types                       *
                   ***********************************************************/

                   when lrsVerb == 'SUM' | lrsVerb == 'SUMM' then do
                        address ISPEXEC "CONTROL DISPLAY SAVE"
                        call Show_Summary_Table
                        address ISPEXEC "CONTROL DISPLAY RESTORE"
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Sort the table by field and direction (if given)         *
                   ***********************************************************/

                   when lrsVerb == 'SORT' then do
                        LastSortName = lrsSortName           /* Save Sort Name */
                        LastSortDir = lrsSortDir             /* Save Sort direction */
                        lrsAction = translate(lrsAction)     /* Ensure uppercase for compare */

                        if lrsDirection <> "" then do
                           lrsDirection = translate(lrsDirection)
                           select
                              when lrsDirection == 'D' then lrsSortDir = 'D'
                              when lrsDirection == 'A' then lrsSortDir = 'A'
                              otherwise
                                 zedsmsg = "Invalid Sort Dir"
                                 zedlmsg = "Invalid sort direction given, previous direction kept"
                                 address ISPEXEC "SETMSG MSG(ISRZ001)"
                                 end
                           end

                        lrsSortKey = lrsAction
                        select
                          when lrsAction == ""        then do
                                                           lrsSortKey  = "DATE"
                                                           lrsSortName = "LRSDATEG"
                                                           end
                          when lrsAction == "DATE"    then lrsSortName = "LRSDATEG"
                          when lrsAction == "DAY"     then lrsSortName = "LRSDAYN"
                          when lrsAction == "TIME"    then lrsSortName = "LRSTIME"
                          when lrsAction == "RECTYPE" then lrsSortName = "LRSTYPE"
                          when lrsAction == "JOB"     then lrsSortName = "LRSJOBN"
                          when lrsAction == "JOBNAME" then lrsSortName = "LRSJOBN"
                          when lrsAction == "MODULE"  then lrsSortName = "LRSCOMP"
                          when lrsAction == "CSECT"   then lrsSortName = "LRSCSCT"
                          when lrsAction == "REASON"  then lrsSortName = "LRSREAS"
                          when lrsAction == "CPU"     then lrsSortName = "LRSCPU"
                          when lrsAction == "SEQNO"   then ,
                               if lrsseqn_o == 0 then lrsSortName = "ERROR"
                               else lrsSortName = "LRSSEQN"
                          when lrsAction == "JULIAN"  then ,
                               if lrsdatej_o == 0 then lrsSortName = "ERROR"
                               else lrsSortName = "LRSDATEJ"
                          when lrsAction == "DESC"    then ,
                               if lrsdesc_o == 0 then lrsSortName = "ERROR"
                               else lrsSortName = "LRSDESC"
                          when lrsAction == "DESCRIPTION"    then ,
                               if lrsdesc_o == 0 then lrsSortName = "ERROR"
                               else lrsSortName = "LRSDESC"
                          otherwise
                            lrsSortName = "LRSDATEG"
                            lrsSortKey  = "DATE"
                            zedsmsg = "Invalid Sort Field"
                            zedlmsg = "Invalid sort Field was given, DATE will be used"
                            address ISPEXEC "SETMSG MSG(ISRZ001)"
                            end

                        if lrsSortName == "ERROR" then do
                           lrsSortName = LastSortName
                           lrsSortKey  = "DATE"
                           zedsmsg = "Field not on screen"
                           zedlmsg = "The field "lrsAction" is not shown on "lrsOption" table display"
                           address ISPEXEC "SETMSG MSG(ISRZ001)"
                           end
                        else if LastSortName == lrsSortName then ,
                                if LastSortDir == lrsSortDir then do
                                   zedsmsg = "Entries in sort order"
                                   zedlmsg = "This table is already in sort order by "lrsSortName
                                   address ISPEXEC "SETMSG MSG(ISRZ001)"
                                   end
                                else call SetUp_lrsTable
                             else call SetUp_lrsTable           /* Set up table for new highlighted field */
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Show statistics table                                    *
                   ***********************************************************/

                   when lrsVerb == "STATS" then do
                        address ISPEXEC "CONTROL DISPLAY SAVE"
                        call Show_Stats_Table
                        address ISPEXEC "CONTROL DISPLAY RESTORE"
                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Show "only" certain rows                                 *
                   ***********************************************************/

                   when lrsVerb == "ONLY" then do
                        lrsAction = translate(lrsAction)


                        address ISPEXEC "TBVCLEAR "lrstable  /* Clear all row variables for TBSARG */

                        onlycode = ""
                        if words(lrsZCMD) == 1 then do
                           address ISPEXEC "CONTROL DISPLAY SAVE"
                           address ISPEXEC "DISPLAY PANEL(LRS$ONLY)"
                           onlyrc = rc
                           address ISPEXEC "CONTROL DISPLAY RESTORE"
                           if onlyrc <> 0 then onlycode = "ER"
                           else call Get_Only_Field
                           end
                        else do i = 2 to words(lrsZCMD) by 2 /* loop thru pairs */
                                field = word(lrsZCMD,i)      /* Like RECTYPE    */
                                value = word(lrsZCMD,i+1)    /* ..   ABEND      */
                                call Get_Only_Field          /* Get only field  */
                                end

                        select
                          when onlycode == ""   then do
                               lrsMode = "ONLY"
                               if lrsTPanl == "LRS$ETDL" then lrsTPanl = "LRS$ETSL"
                                  else lrsTPanl = "LRS$ETSS"
                               address ISPEXEC "TBTOP  "lrstable
                               address ISPEXEC "TBSARG "lrstable
                               sarg_rc = rc
                               if sarg_rc <> 0 then do
                                  zedsmsg = "Not Found"
                                  zedlmsg = "The field "lrsAction" is not found"
                                  address ISPEXEC "SETMSG MSG(ISRZ001)"
                                  end
                               else do
                                    zedsmsg = "OK"
                                    zedlmsg = "Only Table entries with "lrsAction" equal to "lrsDirection" are shown"
                                    address ISPEXEC "SETMSG MSG(ISRZ001)"
                                    end
                               end
                          when onlycode == "OFF" then do
                               lrsMode = "ALL"
                               if lrsTPanl == "LRS$ETSL" then lrsTPanl = "LRS$ETDL"
                                  else lrsTPanl = "LRS$ETDS"
                               zedsmsg = "All entries"
                               zedlmsg = "All table entries are now shown"
                               address ISPEXEC "SETMSG MSG(ISRZ001)"
                               end
                          when onlycode == "ND" then do
                               zedsmsg = "Field not on screen"
                               zedlmsg = "The field "lrsAction" is not shown on "lrsOption" table display"
                               address ISPEXEC "SETMSG MSG(ISRZ001)"
                               end
                          otherwise
                             nop /* We have already issued message for "ER" */
                             end

                        end

                   /***********************************************************
                   * Locate to a row in the current sort field                *
                   ***********************************************************/

                   when lrsVerb == "L" | lrsVerb == "LOC" then do
                        lrsAction = translate(lrsAction)
                        locate_rc = 0

                        if lrsSortName == "LRSDAYN" then ,
                           select
                             when lrsAction == "SUN" | lrsAction == "SUNDAY"    then lrsAction = 0
                             when lrsAction == "MON" | lrsAction == "MONDAY"    then lrsAction = 1
                             when lrsAction == "TUE" | lrsAction == "TUESDAY"   then lrsAction = 2
                             when lrsAction == "WED" | lrsAction == "WEDNESDAY" then lrsAction = 3
                             when lrsAction == "THU" | lrsAction == "THURSDAY"  then lrsAction = 4
                             when lrsAction == "FRI" | lrsAction == "FRIDAY"    then lrsAction = 5
                             when lrsAction == "SAT" | lrsAction == "SATURDAY"  then lrsAction = 6
                             otherwise
                               locate_rc = 80
                               zedsmsg = "Invalid locate value"
                               zedlmsg = "Locates in the Day field must of type 'FRI' or 'FRIDAY'"
                               address ISPEXEC "SETMSG MSG(ISRZ001)"
                               end

                        if locate_rc == 0 then do
                           address ISPEXEC "TBTOP "lrstable

                           lrsActionL = length(lrsAction)
                           do while locate_rc == 0
                              address ISPEXEC "TBSKIP "lrstable
                              locate_rc = rc

                              interpret "locate_key = substr("lrsSortName",1,lrsActionL)"
                              if locate_key == lrsAction then locate_rc = 99
                              if lrsSortDir == 'A' then ,
                                 if locate_key > lrsAction then locate_rc = 98
                                 else nop
                              else if locate_key < lrsAction then locate_rc = 97
                              end /* of "do while locate_rc = 0" */

                           if locate_rc < 96 then do
                              zedsmsg = "Value not found"
                              zedlmsg = "Value not found in current sort field"
                              address ISPEXEC "SETMSG MSG(ISRZ001)"
                              end
                           end

                        lrsVerb = ""
                        end

                   /***********************************************************
                   * Invalid verb entered on primary (command) line           *
                   ***********************************************************/

                   otherwise
                        zedsmsg = "Invalid Verb"
                        zedlmsg = "Verb "verb" not valid"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        verb = ""
                        end
                 end

              /***********************************************************************
              * Process the table selections                                         *
              ***********************************************************************/

              lrstsel = translate(lrstsel)

              select

                /********************************************************
                * Dummy select for primary line simulations of line     *
                * commands: Command ===> L 92/03/06                     *
                ********************************************************/

                when verb == '' then nop

                /*********************************************************
                * Show only the Tourist file for a invocation of EREP    *
                *********************************************************/

                when lrstsel == 'T' then do

                     node =  "D"substr(lrsdateg,1,2)||substr(lrsdateg,4,2)||substr(lrsdateg,7,2)|| ,
                            ".T"substr(lrstime,1,2)||substr(lrstime,4,2)||substr(lrstime,7,2)||substr(lrstime,10,1)

                     if lrsseqn <> "" then node = node||".S"lrsseqn

                     dsn = "EREP."node".TOURIST"
                     call Browse_Dataset

                     end

                /*********************************************************
                * Select event for report by LOGREC program              *
                *********************************************************/

                when lrstsel == 'S' then do

                     erep_firsttime = 1
                     node =  "D"substr(lrsdateg,1,2)||substr(lrsdateg,4,2)||substr(lrsdateg,7,2)|| ,
                            ".T"substr(lrstime,1,2)||substr(lrstime,4,2)||substr(lrstime,7,2)||substr(lrstime,10,1)

                     if lrsseqn == "" then ,
                        status = "Invoking EREP to generate report on this "lrstype" entry"
                     else do
                          node = node||".S"lrsseqn
                          status = "Invoking EREP to generate report on this "lrstype" entry: SEQ"lrsseqn
                          end

                     if lrsEREP.0 <> 0 then ,              /* See if we have already created report */
                        do i = 1 to lrsEREP.0
                           if lrsEREP.i = lrsseqn then do
                              erep_firsttime = 0
                              i = lrsEREP.0  /* break the do loop */
                              end
                           end

                     if erep_firsttime then do             /* Have a report already created ? */
                        dsn = "EREP."node".EREPPT"
                        x = SYSDSN(dsn)
                        if x == "OK" then erep_firsttime = 0
                        end

                     if erep_firsttime then do

                        i = lrsEREP.0 + 1       /* Increment total invocation count by 1 */
                        lrsEREP.0 = i           /* Set to new total invocation count */
                        lrsEREP.i = node        /* Save this node for next time */

                        yy = substr(lrsdatej,1,2)
                        ddd = substr(lrsdatej,4,3)
                        shh = substr(lrstime,1,2)
                        smm = substr(lrstime,4,2)
                        ehh = substr(lrstime,1,2)

                        emm = smm + 1
                        if emm > 59  then do          /* New Hour? */
                           ehh = shh + 1
                           if  ehh = 24 then ehh = "00"
                           emm = "00"
                           end
                        if length(emm) == 1 then emm = "0"emm
                        if length(ehh) == 1 then ehh = "0"ehh

                        select
                          when substr(lrstype,1,3) == 'IPL' then type = 'I'
                          when substr(lrstype,1,3) == 'EOD' then type = 'E'
                          otherwise
                            type = 'S'   /* ABEND, Prog-Int, Symptom, etc. */
                            end

                        parm = "ACC=N,DATE=("yy||ddd"),"
                        if lrsseqn <> "" then parm = parm||"ERRORID=("lrsseqn"),"
                        parm = parm||"HIST=Y,LINECT=999,PRINT=PT,"
                        parm = parm||"TIME=("shh||smm","ehh||emm"),"
                        parm = parm||"TYPE="type",ZERO=N"

                        info1 = "Entry made at "lrstime" on "lrsdatej lrsday lrsdateg
                        info2 = "> "lrstype lrsjobn lrscomp lrscsct lrsreas "CPU: "lrscpu
                        info3 = " "
                        info4 = "> IFCEREP1 parm: "parm
                        address ISPEXEC "CONTROL DISPLAY SAVE"
                        address ISPEXEC "CONTROL DISPLAY LOCK"
                        address ISPEXEC "DISPLAY PANEL(LRS$LOGO)"
                        address ISPEXEC "CONTROL DISPLAY RESTORE"

                        address TSO "ALLOCATE FILE(EREPPT)  DATASET(EREP."node".EREPPT) NEW SPACE(5,5) TRACKS REUSE"
                        address TSO "ALLOCATE FILE(TOURIST) DATASET(EREP."node".TOURIST) NEW SPACE(2,2) TRACKS REUSE"
                        address TSO "ALLOCATE FILE(SYSIN) DUMMY REUSE"
                        address TSO "ALLOCATE FILE(DIRECTWK) SPACE(5) CYLINDER NEW DELETE"
                        address TSO "ALLOCATE FILE(ACCIN) DA("accin_dsn") SHR REUSE"

                        address TSO "CALL 'SYS1.LINKLIB(IFCEREP1)' '"parm"'"
                        erep_rc = rc

                        address TSO "FREE FILE(ACCIN)"
                        address TSO "FREE FILE(DIRECTWK)"

                        if erep_rc == 0 then dsn = "EREP."node".EREPPT"
                        else do
                             zedsmsg = "EREP failed"
                             zedlmsg = "Invocation of EREP for the event failed, check this file"
                             address ISPEXEC "SETMSG MSG(ISRZ001)"
                             dsn = "EREP."node".TOURIST"
                             end
                        end

                     else dsn = "EREP."node".EREPPT"

                     panel = 'ISRBROBF'       /* Standard IBM panel name */
                     call Browse_Dataset

                     end

                /*********************************************************
                * Show row variables                                     *
                *********************************************************/

                when lrstsel == '?' then do
                     address ISPEXEC "CONTROL DISPLAY SAVE"
                     address ISPEXEC "DISPLAY PANEL(LRS$EIN)"
                     address ISPEXEC "CONTROL DISPLAY RESTORE"
                     end

                /*******************************************************
                * Hit enter (Null) or specified an incorrect line cmd  *
                *******************************************************/

                otherwise
                   if lrstsel == "" then do
                        zedsmsg = lrstbcrp"=CRP"
                        zedlmsg = "CRP!"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                      address ISPEXEC "TBSKIP "lrstable "NUMBER("lrstbcrp")"
                      end
                   else do
                        zedsmsg = "Incorrect option"
                        zedlmsg = "Row selection option was invalid"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        end
                   end /* of "otherwise */

                lrstsel = ''

              end /* of "if lrstbdrc == 0" */

           end /* of "do while lrstbdrc = 0" */

        address ISPEXEC "TBCLOSE "lrstable
        address ISPEXEC "TBCLOSE "sumtable
        address ISPEXEC "TBCLOSE "statable

        /*********************************************************************
        * Delete any LOGREC report files we have created during this session *
        *********************************************************************/

        if lrsEREPSave then NOP         /* user wants to save them ? */
        else if lrsEREP.0 <> 0 then do
                number = lrsEREP.0 * 2
                status = "Deleting "number" EREP files created in this session"
                info1 = ""
                info2 = "Note: Terminating SOFTLOG application"
                info3 = ""
                info4 = ""
                address ISPEXEC "CONTROL DISPLAY LOCK"
                address ISPEXEC "DISPLAY PANEL(LRS$LOGO)"

                call "OUTTRAP" "dummy.","*"
                do i = 1 to lrsEREP.0
                   address TSO "DELETE EREP."lrsEREP.i".EREPPT"
                   address TSO "DELETE EREP."lrsEREP.i".TOURIST"
                   end
                call "OUTTRAP" "OFF"

                end

        /*********************************************************************
        * Common exit from LRS exec                                          *
        *********************************************************************/

        zedsmsg = "Complete"
        zedlmsg = "SoftLog processing complete"
        address ISPEXEC "SETMSG MSG(ISRZ001)"
        exit

        /*********************************************************************
        *  Set up table models and titles based on option                    *
        *********************************************************************/

        Setup_lrsTable:
        /*
        *** Fix up table titles and models
        */
        address ISPEXEC "VGET ZSCREENW"
        if lrsOption = "LONG" then do
           if zscreenw > 80 then do
              if lrsMode = "ALL" then lrstpanl = "LRS$ETDL"
              else lrstpanl = "LRS$ETSL"
              vars = "(LRSTSEL,LRSDATEG,LRSDAY,LRSSEQN)"
              lrst1   = "  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU     Seqno"
              lrst2   = "  Description"
              lrsmod1 = "_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU `Z   ! !"
                     /* "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9" */
              lrst2   = "  Julian       Description"
              lrsmod2 = "  $LRSDATEJ    `LRSDESC ! !"
              lrst3   = "  -----------------------------------------------------------------------------------"
              lrsseqn_o  = 81
              lrsseqn_m  = 1
              lrsdesc_o  = 16
              lrsdesc_m  = 2
              lrsdatej_o = 3
              lrsdatej_m = 2
              end
           else do
                if lrsMode = "ALL" then lrstpanl = "LRS$ETDL"
                else lrstpanl = "LRS$ETSL"
                vars = "(LRSTSEL,LRSDATEG,LRSDAY,LRSSEQN)"
                lrst1   = "  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU"
                lrsmod1 = "_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU"
                       /* "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8" */
                lrst2   = "  Julian       Seqno Description                                                "
                lrsmod2 = "  $LRSDATEJ    `Z    `LRSDESC                                                   "
                lrst3   = "  ------------------------------------------------------------------------------"
                lrsseqn_o   = 16
                lrsseqn_m   = 2
                lrsdatej_o  = 3
                lrsdesc_o   = 22
                lrsdesc_m   = 2
                end
           end  /* of "if lrsOption = "LONG" then do" */
        else do
             if lrsMode = "ALL" then lrstpanl = "LRS$ETDS"
             else lrstpanl = "LRS$ETSS"
             vars = "(LRSTSEL,LRSDATEG,LRSDAY)"
             lrst1   = "  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU     "
             lrst2   = "  -------- --- ----------- -------- -------- -------- -------- -------- ------  "
             lrsmod1 = "_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU "
                    /* "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+" */
             lrsdesc_o  = 0  /* Not allowed: not displayed on screen */
             lrsseqn_o  = 0  /* Not allowed: not displayed on screen */
             lrsdatej_o = 0  /* Not allowed: not displayed on screen */
             if zscreenw > 80 then do
                lrsdesc_m  = 1
                lrsdesc_o = 81
                lrst1 = lrst1||"Description"
                lrst2 = lrst2||"-----------"
                lrsmod1 = lrsmod1||"`LRSDESC"
                end
             end

        /*
        *** Change Sort field highlighting in table model variables
        */

        select
          when lrsSortName == "LRSDAYN" then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSTIME" then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSTYPE" then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,28)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSJOBN"  then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,37)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSREAS" then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,46)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSCOMP" then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,55)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSCSCT"  then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,64)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSCPU"  then do
               lrsmod1 = overlay('`',lrsmod1,3)
               lrsmod1 = overlay('`',lrsmod1,12)
               lrsmod1 = overlay('`',lrsmod1,16)
               lrsmod1 = overlay('$',lrsmod1,73)
               lrsmod2 = overlay('`',lrsmod2,3)
               end
          when lrsSortName == "LRSSEQN" then ,
               if lrsseqn_o == 0 then lrsSortName = "LRSDATEG"
               else do
                    lrsmod1 = overlay('`',lrsmod1,3)
                    lrsmod1 = overlay('`',lrsmod1,12)
                    lrsmod1 = overlay('`',lrsmod1,16)
                    if lrsseqn_m == 1 then ,
                       lrsmod1 = overlay('$',lrsmod1,lrsseqn_o)
                    else do
                         lrsmod2 = overlay('`',lrsmod2,3)
                         lrsmod2 = overlay('$',lrsmod2,lrsseqn_o)
                         end
                    end
          when lrsSortName == "LRSDESC" then ,
               if lrsdesc_o == 0 then lrsSortName = "LRSDATEG"
               else do
                    lrsmod1 = overlay('`',lrsmod1,3)
                    lrsmod1 = overlay('`',lrsmod1,12)
                    lrsmod1 = overlay('`',lrsmod1,16)
                    if lrsdesc_m == 1 then ,
                       lrsmod1 = overlay('$',lrsmod1,lrsdesc_o)
                    else do
                         lrsmod2 = overlay('`',lrsmod2,3)
                         lrsmod2 = overlay('$',lrsmod2,lrsdesc_o)
                         end
                    end
          otherwise
               lrsSortName = "LRSDATEG"
               end

        if lrsVerb == "SORT" then do
           if lrsRows > 3000 then do       /* Big Sort? */
              status = "Sorting "strip(lrsRows,'L','0')" table entries by "lrsSortKey
              info1 = ""
              info2 = ""
              info3 = ""
              info4 = ""
              address ISPEXEC "CONTROL DISPLAY LOCK"
              address ISPEXEC "DISPLAY PANEL(LRS$LOGO)"
              end

           if lrsSortName == "LRSDATEG" | lrsSortName == "LRSDATEJ" then sortname = "LRSBDATE"
           else sortname = lrsSortName
           select
             when sortname == "LRSBDATE" then address ISPEXEC "TBSORT "lrstable" FIELDS("sortname",C,"lrsSortDir",LRSBTIME,B,"lrsSort
             when sortname == "LRSBTIME" then address ISPEXEC "TBSORT "lrstable" FIELDS("sortname",C,"lrsSortDir",LRSBDATE,B,"lrsSort
             otherwise
               address ISPEXEC "TBSORT "lrstable" FIELDS("sortname",C,"lrsSortDir",LRSBDATE,B,"lrsSortDir",LRSBTIME,B,"lrsSortDir")"
               end
           end

        return

        /*********************************************************************
        *  Browse the dataset in variable DSN and handle error conditions    *
        *********************************************************************/

        Browse_Dataset:
        x = LISTDSI(dsn)

        if x = 0 then do
           br_dsn = SYSDSNAME
           address ISPEXEC "CONTROL ERRORS RETURN"
           address ISPEXEC "CONTROL DISPLAY SAVE"
           address ISPEXEC "BROWSE DATASET('"br_dsn"') PANEL("panel")"
           br_rc = rc
           if br_rc <> 0 then do
              zedsmsg = SYSDSN(br_dsn)
              zedlmsg = "Browse to dataset failed, DSN="br_dsn
              address ISPEXEC "SETMSG MSG(ISRZ001)"
              end
           address ISPEXEC "CONTROL DISPLAY RESTORE"
           address ISPEXEC "CONTROL ERRORS CANCEL"
           end
        else do
             zedsmsg = SYSDSN(dsn)
             zedlmsg = "Verify of dataset failed, DSN="dsn
             address ISPEXEC "SETMSG MSG(ISRZ001)"
             end

        return

        /*********************************************************************
        * Show Summary table                                                 *
        *********************************************************************/

        Show_Summary_Table:

        /*
        *** Initialize
        */

        address ISPEXEC "TBTOP "sumtable       /* Get to the top of things */
        sumtbdrc = 0                           /* Starting TBDISPL return code */
        sumSortDir = "D"                       /* Default sort direction */
        sumSortName = "SUMCOUNT"               /* Default sort key */
        sumVerb = "SORT"                       /* Fake SetUp_SumTable into sorting */
        call SetUp_SumTable                    /* Set up table for first table display */

        /*
        *** Process table until user hits the END key
        */

        do while sumtbdrc < 8
           address ISPEXEC "TBDISPL "sumtable" PANEL(LRS$STD)"
           sumtbdrc = rc

           if sumtbdrc < 8 then do

              /******************************************************************
              * Process the primary line for commands                           *
              *******************************************************************/

              if zcmd <> '' then do
                 parse value zcmd with sumVerb " " sumAction " " sumDirection
                 zcmd = ''

                 select
                   when translate(sumVerb) = 'REPORT' then do
                        Output = "1"strip(lrsRange) "- Summary generated:" date() time()
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                        Output = " "
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"

                        Output = " Module   CSECT    Reason   First Date   Last Date      Count"
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                        Output = " -------- -------- -------- ------------ ------------ -------"
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"

                        address ISPEXEC "TBTOP "sumtable
                        LRC = 0
                        do while LRC = 0
                           address ISPEXEC "TBSKIP "sumtable
                           LRC = rc
                           if lrc == 0 then do
                              output = " "|| ,
                                       left(summod,8)||" "||left(sumcsct,8)||" "left(sumreas,8) ,
                                       left(sumsdate,12)||" "||left(sumedate,12)||" "||left(sumcount,6)
                              address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                              end
                           end /* of "do while LRC = 0" */

                        zedsmsg = "Output created"
                        zedlmsg = "LOGREC summary put into list dataset"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"

                        sumVerb = ""
                        end


                   when translate(sumVerb) = 'SORT' then do
                        LastSortName = sumSortName           /* Save Sort Name */
                        LastSortDir = sumSortDir             /* Save Sort Direction */
                        sumAction = translate(sumAction)     /* Ensure uppercase for compare */

                        if sumDirection <> "" then do
                           sumDirection = translate(sumDirection)
                           select
                              when sumDirection == 'D' then sumSortDir = 'D'
                              when sumDirection == 'A' then sumSortDir = 'A'
                              otherwise
                                 zedsmsg = "Invalid Sort Dir"
                                 zedlmsg = "Invalid sort direction given, previous direction kept"
                                 address ISPEXEC "SETMSG MSG(ISRZ001)"
                                 end
                           end

                        select
                          when sumAction == ""           then sumSortName = "SUMCOUNT"
                          when sumAction == "MOD"        then sumSortName = "SUMMOD"
                          when sumAction == "MODULE"     then sumSortName = "SUMMOD"
                          when sumAction == "CSECT"      then sumSortName = "SUMCSCT"
                          when sumAction == "REASON"     then sumSortName = "SUMREAS"
                          when sumAction == "FDATE"      then sumSortName = "SUMSDATE"
                          when sumAction == "FIRST-DATE" then sumSortName = "SUMSDATE"
                          when sumAction == "LDATE"      then sumSortName = "SUMEDATE"
                          when sumAction == "LAST-DATE"  then sumSortName = "SUMEDATE"
                          when sumAction == "COUNT"      then sumSortName = "SUMCOUNT"
                          otherwise
                            sumSortName = "SUMCOUNT"
                            zedsmsg = "Invalid Sort field"
                            zedlmsg = "Invalid sort field was given, COUNT will be used"
                            address ISPEXEC "SETMSG MSG(ISRZ001)"
                            end

                        if LastSortName == sumSortName then ,
                           if LastSortDir == sumSortDir then do
                              zedsmsg = "Entries in sort order"
                              zedlmsg = "This table is already in sort order by "sumSortKey
                              address ISPEXEC "SETMSG MSG(ISRZ001)"
                              end
                           else call SetUp_SumTable
                        else call SetUp_SumTable           /* Set up table for new highlighted field */
                        sumVerb = ""
                        end

                   when translate(sumVerb) = 'STATS' then do
                        address ISPEXEC "DISPLAY PANEL(LRS$STAT)"
                        sumVerb = ""
                        end

                   when translate(sumVerb) = 'L' then do
                        if sumSortName == "SUMCOUNT" then do
                           zedsmsg = "Can't locate"
                           zedlmsg = "Sorry: Can't perform locate on count field"
                           address ISPEXEC "SETMSG MSG(ISRZ001)"
                           end
                        else do
                             address ISPEXEC "TBTOP "sumtable

                             locate_rc = 0
                             sumActionL = length(sumAction)
                             do while locate_rc = 0
                                address ISPEXEC "TBSKIP "sumtable
                                locate_rc = rc
                                interpret "locate_key = substr("sumSortName",1,sumActionL)"
                                if locate_key = sumAction then locate_rc = 99
                                if sumSortDir == 'A' then ,
                                   if locate_key > sumAction then locate_rc = 98
                                   else nop
                                else if locate_key < sumAction then locate_rc = 97
                                end /* of "do while locate_rc = 0" */
                              if locate_rc < 90 then do
                                 zedsmsg = "Field not found"
                                 zedlmsg = "Field not found in current Sort Field"
                                 address ISPEXEC "SETMSG MSG(ISRZ001)"
                                 end
                             end
                        sumVerb = ""
                        end

                   otherwise
                        zedsmsg = "Invalid verb"
                        zedlmsg = "Verb "sumVerb" not valid"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        sumVerb = ""
                        end
                 end

              /***********************************************************************
              * Process the table selections                                         *
              ***********************************************************************/

              /* no current table selections! */

              end /* of "if sumtbdrc == 0" */

           end /* of "do while sumtbdrc = 0" */

        return

        /*********************************************************************
        *  Set up Summary table models and titles                            *
        *********************************************************************/

        Setup_SumTable:

        sumt1   = " Module    CSECT     Reason    First-Date    Last-Date     Count"
        sumt2   = " --------  --------  --------  ------------  ------------  -----"
        summod1 = "`SUMMOD   `SUMCSCT  `SUMREAS  `SUMSDATE     `SUMEDATE     ~SUMCOUNT"
               /* "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8" */

        if sumVerb == "SORT" then do
           sumSortType = "C"
           select
             when sumSortName == "SUMMOD"  then do
                  summod1 = overlay('`',summod1,59)
                  summod1 = overlay('~',summod1,1)
                  end
             when sumSortName == "SUMCSCT" then do
                  summod1 = overlay('`',summod1,59)
                  summod1 = overlay('~',summod1,11)
                  end
             when sumSortName == "SUMREAS" then do
                  summod1 = overlay('`',summod1,59)
                  summod1 = overlay('~',summod1,21)
                  end
             when sumSortName == "SUMSDATE" then do
                  summod1 = overlay('`',summod1,59)
                  summod1 = overlay('~',summod1,31)
                  end
             when sumSortName == "SUMEDATE" then do
                  summod1 = overlay('`',summod1,59)
                  summod1 = overlay('~',summod1,45)
                  end
             otherwise
                  sumSortName = "SUMCOUNT"
                  sumSortType = "N"
                  end

           address ISPEXEC "TBSORT "sumtable" FIELDS("sumSortName","sumSortType","sumSortDir")"
           end

        return

        /*********************************************************************
        * Show Statistics Table                                              *
        *********************************************************************/

        Show_Stats_Table:

        /*
        *** Initialize
        */

        address ISPEXEC "TBTOP "statable       /* Get to the top of things */
        statbdrc = 0                           /* Starting TBDISPL return code */

        /*
        *** Process table until user hits the END key
        */

        do while statbdrc < 8
           address ISPEXEC "TBDISPL "statable" PANEL(LRS$STTD)"
           statbdrc = rc

           if statbdrc < 8 then do

              /******************************************************************
              * Process the primary line for commands                           *
              *******************************************************************/

              if zcmd <> '' then do
                 parse value zcmd with statVerb
                 zcmd = ''

                 select
                   when translate(statVerb) = 'REPORT' then do
                        Output = "1"strip(lrsRange) "- Statistics generated:" date() time()
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                        Output = " "
                        address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"

                        address ISPEXEC "TBTOP "statable
                        LRC = 0
                        do while LRC = 0
                           address ISPEXEC "TBSKIP "statable
                           LRC = rc
                           if lrc == 0 then do
                              output = " "line
                              address ISPEXEC "LIST BUFNAME(OUTPUT) LINELEN("length(Output)") CC"
                              end
                           end /* of "do while LRC = 0" */

                        zedsmsg = "Output created"
                        zedlmsg = "LOGREC statistics put into list dataset"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"

                        statVerb = ""
                        end

                   otherwise
                        zedsmsg = "Invalid verb"
                        zedlmsg = "Verb "statVerb" not valid"
                        address ISPEXEC "SETMSG MSG(ISRZ001)"
                        statVerb = ""
                        end
                 end

              /***********************************************************************
              * Process the table selections                                         *
              ***********************************************************************/

              /* no current table selections! */

              end /* of "if statbdrc == 0" */

           end /* of "do while statbdrc = 0" */

        return

        /*********************************************************************
        * Get only field - Input: field = table name , Value is the value    *
        *********************************************************************/

        Get_Only_Field:

        select
          when field == "DATE"     then LRSDATEG = value
          when field == "DAY"      then LRSDAY   = value
          when field == "TIME"     then LRSTIME  = value
          when field == "RECTYPE"  then LRSTYPE  = value
          when field == "JOB"      then LRSJOBN  = value
          when field == "JOBNAME"  then LRSJOBN  = value
          when field == "MODULE"   then LRSCOMP  = value
          when field == "CSECT"    then LRSCSCT  = value
          when field == "REASON"   then LRSREAS  = value
          when field == "CPU"      then LRSCPU   = value
          when field == "SEQNO"    then ,
               if lrsseqn_o == 0 then onlycode = "ND"
               else LRSSEQN = value
          when field == "JULIAN"   then ,
               if lrsdatej_o == 0 then onlycode = "ND"
               else LRSDATEJ = value
          when field == "DESC" | field == "DESCRIPTION" then ,
               if lrsdesc_o == 0 then onlycode = "ND"
               else LRSDESC = value
          when field == "OFF" then do
               onlycode = "OFF"
               end
          otherwise
            onlycode = "ER"
            zedsmsg = "Invalid Field"
            zedlmsg = "Invalid ONLY field was given, use table headings"
            address ISPEXEC "SETMSG MSG(ISRZ001)"
            end

        return
